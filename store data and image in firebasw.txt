 const addSurveyDataToFirestore = async () => {
        const filterUndefinedValues = (obj) => {
            const newObj = {};
            for (const key in obj) {
              if (obj[key] !== undefined) {
                newObj[key] = obj[key];
              }
            }
            return newObj;
          };
          const filteredSurveyData = filterUndefinedValues({
            supervisorName,
            EnterSupervisorName,
            supervisorCDARID,
            auditorName,
            auditorCDAR,
            region,
            cities,
            SMSId,
            ShopName,
            ShopGPSLocation,
            EnterShopGPSRecord,
            ControlType,
            EnterControlledType,
            lineCheckofStock,
            totalNumberofLine,
            totalLinechecked,
            LinesCountedCorrectly,
            LineCheckedofPurchases,
            auditorCollectLinePurchase,
            totalLinecheckedAuditor,
            LinesPurchasesMatchwithAuditor,
            supervisorAskQuestion,
            askquestionFromauditor,
            auditorAnswerCorrectly,
            supervisorFeedback,
            BabyFormula,
            BabyHygeine,
            butterAmbidient,
            butterMarg,
            CakeAmbident,
            CheseAmbdient,
            cheseFrozen,
            chocolateNovelTies,
            chocolateSubsitues,
            cookingAmbient,
            CosmeticRemoval,
            DairyBaseDrinks,
            DrinksFlavouredRtd,
            DrinksFlavouredRtdStockAvailibity,
            EnergyDrink,
            EnergyDrinkStockAvailibity,
            facialToning,
            HairCare,
            Herbs,
            InsectControl,
            juices,
            juicesStockAvailibity,
            LaundharyGeneral,
            OralHygeine,
            PersonalCleaning,
            SavouryBiscuits,
            ShavingDepilationFemale,
            ShavingDepilationMale,
            SkinConditioningMoisturing,
            SkinTreatment,
            Snaks,
            SugarCandy,
            TeaInfusion,
            Water,
            PlanCompliance,
            EnterPlanComplainceRecord,
            CategoryHandling,
            EnterCategoryHandlingRecord,
            WaterStockAvailibity,
            Comment,
            selectedShopType,
            ShopNameActual,
            ShopTypeActual,
            currentCoordinate,
            previous_lat: `${findShopByLabel(ShopName).lat}`,
            previous_long: `${findShopByLabel(ShopName).long}`
          });
          console.log(filteredSurveyData);
        try {
            const docRef = await addDoc(collection(db, "SvrSurvey"), filteredSurveyData);
            console.log("Document written with ID: ", docRef.id);
        } catch (error) {
            console.error("Error adding document: ", error);
        }
    };

    //upload images in database
    const getImageBlob = async (imageUrl) => {
        if (!imageUrl) {
            throw new Error('Image URL is empty');
        }
    
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            xhr.onload = function () {
                resolve(xhr.response);
            };
            xhr.onerror = function () {
                reject(new TypeError('Network request failed'));
            };
            xhr.responseType = 'blob';
            xhr.open('GET', imageUrl, true);
            xhr.send(null);
        });
    };
    
    const uploadImagesFirebase = async (imageUrls) => {
        try {
            const blobPromises = imageUrls.map((imageUrl) => getImageBlob(imageUrl));
    
            const blobs = await Promise.all(blobPromises);
    
            const metadata = {
                contentType: 'image/jpeg',
            };
    
            const storageRef = ref(storage, 'SurveyImages/' + Date.now());
    
            blobs.forEach(async (blob, index) => {
                // Create a child reference using ref with the desired path
                const imageRef = ref(storageRef, `image_${index + 1}.jpg`);
    
                const uploadTask = uploadBytesResumable(imageRef, blob, metadata);
    
                uploadTask.on('state_changed', (snapshot) => {
                    // Track upload progress if needed
                }, (error) => {
                    console.error(`Error uploading image ${index + 1}:`, error);
                }, async () => {
                    // Handle successful upload
                    try {
                        const downloadURL = await getDownloadURL(imageRef);
                        console.log(`File ${index + 1} available at`, downloadURL);
                        // Save downloadURL to your survey data or database
                    } catch (downloadError) {
                        console.error(`Error getting download URL for image ${index + 1}:`, downloadError);
                    }
                });
            });
        } catch (error) {
            console.error("Error uploading images: ", error);
        }
    };
    const uploadSurvey = async () => {
        const imageUrls = [
            ImgUrl, 
            insideImgUrl, 
            gpsLocationImage, 
            ImgUrl1, 
            ImgUrl2, 
            ImgUrl3, 
            ImgUrl4, 
            ImgUrl5
        ].filter(url => url);
        await uploadImagesFirebase(imageUrls);
        await addSurveyDataToFirestore();
        resetForm();
    };